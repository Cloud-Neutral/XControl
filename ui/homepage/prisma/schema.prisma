// Prisma schema for XControl authentication

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  pending
  active
  disabled
}

model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  username              String              @unique
  passwordHash          String
  status                UserStatus          @default(pending)
  mfaEnabled            Boolean             @default(false)
  mfaSecretEncrypted    String?             @map("mfa_secret_encrypted")
  mfaTempSecretEncrypted String?            @map("mfa_temp_secret_encrypted")
  mfaSecretIssuedAt     DateTime?           @map("mfa_secret_issued_at")
  mfaSecretConfirmedAt  DateTime?           @map("mfa_secret_confirmed_at")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")

  emailVerifications    EmailVerification[]
  sessions              Session[]
  recoveryCodes         RecoveryCode[]
  mfaChallenges         MfaChallenge[]
}

model EmailVerification {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  codeHash   String   @map("code_hash")
  expiresAt  DateTime @map("expires_at")
  consumedAt DateTime? @map("consumed_at")
  createdAt  DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  tokenHash    String   @unique @map("token_hash")
  remember     Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  mfaCompleted Boolean  @default(false) @map("mfa_completed")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model MfaChallenge {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tokenHash String   @unique @map("token_hash")
  remember  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model RecoveryCode {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  codeHash  String   @map("code_hash")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, codeHash])
  @@index([userId])
}
